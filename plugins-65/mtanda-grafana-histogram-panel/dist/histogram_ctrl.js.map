{"version":3,"sources":["../src/histogram_ctrl.js"],"names":[],"mappings":"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","file":"histogram_ctrl.js","sourcesContent":["import 'app/plugins/panel/graph/legend';\nimport 'app/plugins/panel/graph/series_overrides_ctrl';\n\nimport template from './template';\nimport angular from 'angular';\nimport moment from 'moment';\nimport kbn from 'app/core/utils/kbn';\nimport _ from 'lodash';\nimport TimeSeries from 'app/core/time_series2';\nimport * as fileExport from 'app/core/utils/file_export';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nexport class HistogramCtrl extends MetricsPanelCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, annotationsSrv) {\n    super($scope, $injector);\n\n    this.annotationsSrv = annotationsSrv;\n    this.hiddenSeries = {};\n    this.seriesList = [];\n    this.colors = [];\n\n    var panelDefaults = {\n      // datasource name, null = default datasource\n      datasource: null,\n      // sets client side (flot) or native graphite png renderer (png)\n      renderer: 'flot',\n      // sets bucket mode (size) for wxact bucket size or (count) to calculate size from min,max and count values\n      bucketMode: 'size',\n      yaxes: [\n        {\n          label: null,\n          show: true,\n          logBase: 1,\n          min: null,\n          max: null,\n          format: 'short'\n        },\n        {\n          label: null,\n          show: true,\n          logBase: 1,\n          min: null,\n          max: null,\n          format: 'short'\n        }\n      ],\n      xaxis: {\n        show: true\n      },\n      grid          : {\n        threshold1: null,\n        threshold2: null,\n        threshold1Color: 'rgba(216, 200, 27, 0.27)',\n        threshold2Color: 'rgba(234, 112, 112, 0.22)'\n      },\n      // show/hide lines\n      lines         : true,\n      // fill factor\n      fill          : 1,\n      // line width in pixels\n      linewidth     : 2,\n      // show hide points\n      points        : false,\n      // point radius in pixels\n      pointradius   : 5,\n      // show hide bars\n      bars          : false,\n      // enable/disable stacking\n      stack         : false,\n      // stack percentage mode\n      percentage    : false,\n      // legend options\n      legend: {\n        show: true, // disable/enable legend\n        values: false, // disable/enable legend values\n        min: false,\n        max: false,\n        current: false,\n        total: false,\n        avg: false\n      },\n      // how null points should be handled\n      nullPointMode : 'connected',\n      // staircase line mode\n      steppedLine: false,\n      // tooltip options\n      tooltip       : {\n        value_type: 'cumulative',\n        shared: true,\n        ordering: 'alphabetical',\n        msResolution: false,\n      },\n      // time overrides\n      timeFrom: null,\n      timeShift: null,\n      // metric queries\n      targets: [{}],\n      // series color overrides\n      aliasColors: {},\n      // other style overrides\n      seriesOverrides: [],\n    };\n\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.tooltip, panelDefaults.tooltip);\n    _.defaults(this.panel.grid, panelDefaults.grid);\n    _.defaults(this.panel.legend, panelDefaults.legend);\n\n    this.colors = $scope.$root.colors;\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html', 2);\n    this.addEditorTab('Display', 'public/plugins/mtanda-histogram-panel/tab_display.html', 3);\n    this.addEditorTab('Histogram Options', 'public/plugins/mtanda-histogram-panel/tab_options.html', 4);\n\n    this.logScales = {\n      'linear': 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024\n    };\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  onInitPanelActions(actions) {\n    actions.push({text: 'Export CSV (series as rows)', click: 'ctrl.exportCsv()'});\n    actions.push({text: 'Export CSV (series as columns)', click: 'ctrl.exportCsvColumns()'});\n    actions.push({text: 'Toggle legend', click: 'ctrl.toggleLegend()'});\n  }\n\n  setUnitFormat(axis, subItem) {\n    axis.format = subItem.value;\n    this.render();\n  }\n\n  issueQueries(datasource) {\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\n      dashboard: this.dashboard,\n      panel: this.panel,\n      range: this.range,\n    });\n    return super.issueQueries(datasource);\n  }\n\n  zoomOut(evt) {\n    this.publishAppEvent('zoom-out', evt);\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\n      dashboard: this.dashboard,\n      panel: this.panel,\n      range: this.range,\n    });\n    this.onDataReceived(snapshotData);\n  }\n\n  onDataError(err) {\n    this.seriesList = [];\n    this.render([]);\n  }\n\n  onDataReceived(dataList) {\n    // png renderer returns just a url\n    if (_.isString(dataList)) {\n      this.render(dataList);\n      return;\n    }\n\n    this.datapointsWarning = false;\n    this.datapointsCount = 0;\n    this.datapointsOutside = false;\n    this.seriesList = dataList.map(this.seriesHandler.bind(this));\n    this.datapointsWarning = this.datapointsCount === 0 || this.datapointsOutside;\n\n    this.annotationsPromise.then(annotations => {\n      this.loading = false;\n      this.seriesList.annotations = annotations;\n      this.render(this.seriesList);\n    }, () => {\n      this.loading = false;\n      this.render(this.seriesList);\n    });\n  }\n\n  seriesHandler(seriesData, index) {\n    var datapoints = seriesData.datapoints;\n    var alias = seriesData.target;\n    var colorIndex = index % this.colors.length;\n    var color = this.panel.aliasColors[alias] || this.colors[colorIndex];\n\n    var series = new TimeSeries({\n      datapoints: datapoints,\n      alias: alias,\n      color: color,\n      unit: seriesData.unit,\n    });\n\n    if (datapoints && datapoints.length > 0) {\n      var last = moment.utc(datapoints[datapoints.length - 1][1]);\n      var from = moment.utc(this.range.from);\n      if (last - from < -10000) {\n        this.datapointsOutside = true;\n      }\n\n      this.datapointsCount += datapoints.length;\n      this.panel.tooltip.msResolution = this.panel.tooltip.msResolution || series.isMsResolutionNeeded();\n    }\n\n\n    return series;\n  }\n\n  onRender() {\n    if (!this.seriesList) { return; }\n\n    for (let series of this.seriesList) {\n      series.applySeriesOverrides(this.panel.seriesOverrides);\n\n      if (series.unit) {\n        this.panel.yaxes[series.yaxis-1].format = series.unit;\n      }\n    }\n  }\n\n  changeSeriesColor(series, color) {\n    series.color = color;\n    this.panel.aliasColors[series.alias] = series.color;\n    this.render();\n  }\n\n  toggleSeries(serie, event) {\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      if (this.hiddenSeries[serie.alias]) {\n        delete this.hiddenSeries[serie.alias];\n      } else {\n        this.hiddenSeries[serie.alias] = true;\n      }\n    } else {\n      this.toggleSeriesExclusiveMode(serie);\n    }\n    this.render();\n  }\n\n  toggleSeriesExclusiveMode (serie) {\n    var hidden = this.hiddenSeries;\n\n    if (hidden[serie.alias]) {\n      delete hidden[serie.alias];\n    }\n\n    // check if every other series is hidden\n    var alreadyExclusive = _.every(this.seriesList, value => {\n      if (value.alias === serie.alias) {\n        return true;\n      }\n\n      return hidden[value.alias];\n    });\n\n    if (alreadyExclusive) {\n      // remove all hidden series\n      _.each(this.seriesList, value => {\n        delete this.hiddenSeries[value.alias];\n      });\n    } else {\n      // hide all but this serie\n      _.each(this.seriesList, value => {\n        if (value.alias === serie.alias) {\n          return;\n        }\n\n        this.hiddenSeries[value.alias] = true;\n      });\n    }\n  }\n\n  toggleAxis(info) {\n    var override = _.findWhere(this.panel.seriesOverrides, {alias: info.alias});\n    if (!override) {\n      override = { alias: info.alias };\n      this.panel.seriesOverrides.push(override);\n    }\n    info.yaxis = override.yaxis = info.yaxis === 2 ? 1 : 2;\n    this.render();\n  };\n\n  addSeriesOverride(override) {\n    this.panel.seriesOverrides.push(override || {});\n  }\n\n  removeSeriesOverride(override) {\n    this.panel.seriesOverrides = _.without(this.panel.seriesOverrides, override);\n    this.render();\n  }\n\n  // Called from panel menu\n  toggleLegend() {\n    this.panel.legend.show = !this.panel.legend.show;\n    this.refresh();\n  }\n\n  legendValuesOptionChanged() {\n    var legend = this.panel.legend;\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\n    this.render();\n  }\n\n  exportCsv() {\n    fileExport.exportSeriesListToCsv(this.seriesList);\n  }\n\n  exportCsvColumns() {\n    fileExport.exportSeriesListToCsvColumns(this.seriesList);\n  }\n}\n\nHistogramCtrl.template = template;\n"]}